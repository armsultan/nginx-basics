##### Nested JWT Claims and Array Data logic Flow:
#   1. Using the auth_jwt_claim_set directive, we set the $jwt_groups NGINX variable to the groups array defined in the JWT. 
#   The values in the array are separated by commas and assigned to $jwt_groups.
#   2. Using the map directive, we search through the list of groups for the Administrator keyword. 
#   If it’s present, the user is deemed an administrator and $isAdmin is set to 1. Otherwise $isAdmin is set to 0.
#   3. The location block for the /admin URI checks the $isAdmin variable. If 0, NGINX returns status code 403 Forbidden back to the client.


# Set variables from the JWT claim parameter identified by key names
# Name matching starts from the top level of the JSON tree
# For arrays, the variable keeps a list of array elements separated by commas.

auth_jwt_claim_set $jwt_groups groups; # Save "group" array values in a variable as comma-separated values
auth_jwt_claim_set $jwt_real_name attributes name; #  Save nested object 2 levels deep, attributes > name in a variable

# Map - Check group array in JWT for "Administrator" to determine if the user is an Admin
map $jwt_groups $isAdmin {
	"~\bAdministrator\b" 1; # Appears within word boundaries (\b) in varible with a CSV (Comma-separated values) list
	default              0;
}

##### Revoke JWT logic Flow:

# From time to time it may be necessary to revoke or re‑issue an API client’s JWT. 
# Using simple map and if blocks, we can deny access to an API client by marking its 
# JWT as revoked until such time as the JWT’s exp claim (expiration date) is reached, 
# at which point the map entry for that JWT can be safely removed.

# Map - Check "sub" (Subject) Claim for revoked subject values
map $jwt_claim_sub $jwt_status {
    "bobby@example.com" "revoked";
    default  "";
}

##### Leveraging JWT Claims for Logging and Rate Limiting

# After validating the JWT, NGINX Plus has access to all of the fields present in the header and the payload as variables
# These are accessed by prefixing $jwt_header_ or $jwt_claim_ to the desired field, or using the 
# `auth_jwt_claim_set` directive to set a variable to a JWT claim parameter identified by key names. 
# We can use claim-based variables to provide API rate limiting per API client, instead of per IP address:

auth_jwt_claim_set $jwt_dept attributes dept; #  Save nested object 2 levels deep, attributes > dept in a variable
limit_req_zone $jwt_dept zone=10rps_per_client:1m rate=10r/s; # Rate Limit - Per JWT claim 10 requests per second

# vim: syntax=nginx