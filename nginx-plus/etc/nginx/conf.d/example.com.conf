# www.example.com HTTP
server {
    # Listening on port 80 on all IP addresses on this machine
    listen 80 default_server;
    # So we can test on localhost on UDF
    listen 127.0.0.1:80 default_server; 

    server_name www.example.com "";
    status_zone www.example.com_http;

    # Server specific logging
    access_log  /var/log/nginx/www.example.com.log main_cache; 
    error_log   /var/log/nginx/www.example.com_error.log notice; 

    location / {
        
        # Including best-practice headers are bonus points
        include includes/proxy_headers/proxy_headers.conf;
        include includes/proxy_headers/keepalive.conf;

        # Enable Cache Purge API here
        # Note: No cache rules, just allow purge on all other '/' URLs
        proxy_cache image_cache;
        proxy_cache_purge $purge_method;

        proxy_pass http://nginx_hello;
    }

    # Enabling rewrite logging
    # Enables logging of ngx_http_rewrite_module module directives 
    # processing results into the error_log at the notice level
    rewrite_log on;
    
    # 1. return - Most simple and fastest (no regex processing) option and should 
    #             be used where possible

    location = /old-url { return 301 new-url; } # 301 MOVED PERMANENTLY
    location = /old { return 302 new; } # 302 FOUND - The target resource resides temporarily under a different URI.
    location = /nginx { return 301 https://www.nginx.com/;}
    location = /en/docs/ { return 301 $scheme://www.nginx.org$request_uri;} # HTTPS redirect

    # 2. rewrite - Enables regex for complicated matching and capture elements in the original URL
    #       last - Flag prevents further rewrite lookups and move-on to location matching
    #    e.g /media/cdn-west/text/file1 becomes /media/cdn-west/txt/file1.txt
    #    e.g /media/cdn-west/music/file1 becomes /media/cdn-west/mp3/file1.mp3
    rewrite ^(/media/.*)/text/(\w+)\.?.*$ $1/txt/$2.txt last;
    rewrite ^(/media/.*)/music/(\w+)\.?.*$ $1/mp3/$2.mp3 last;

    # 3.    break - Flag prevents further location look up (Without this there will be a redirect loop to the same location 
    #               data and keep processing the same rewrite rule for maximum of 10 times)
    #    e.g. /media/cdn-west/mp3/file1.mp3 becomes /media/cdn-west/ra/file1.ra and igonores rewrites below this
    location /media/ {
        rewrite ^(/media/.*)/mp3/(\w+)\.?.*$ $1/ra/$2.ra break;
        proxy_pass http://nginx_hello;
    }

    # 4. Try files - Checks for the existence of the files and directories in order 
    #    (constructing the full path to each file from the settings of the root 
    #    and alias directives), and serves the first one it finds.
    #    e.g. A request for /images/ will try, the url, the url with a ending "/", /images/default.gif and then lastly a HTTP404 error page
    location /images {
        try_files $uri $uri/ /images/default.gif =404; # resource doesn't exist so will result in HTTP404
    }

    # Cache Proxy example for images only
    # Match common Image files
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webp|webm|htc)$ {

        ## Proxy cache settings
        include includes/proxy_cache/image_cache.conf;

        # Including best-practice headers
        include includes/proxy_headers/proxy_headers.conf;
        include includes/proxy_headers/keepalive.conf;

        proxy_pass http://nginx_hello;
    }

    # Active Healthchecks
     location @health_check {
            internal; # Requests by NGINX only
            proxy_set_header Host www.example.com;
            proxy_pass http://nginx_hello;
            health_check interval=5s fails=3 passes=2 uri=/health_check match=status_ok;

            # Health check logs are boring but errors are interesting
            # access_log  /var/log/nginx/health_check.log  main;
            access_log off;
            error_log  /var/log/nginx/error.log error;
    }
}
